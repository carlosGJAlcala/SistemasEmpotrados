import "../../../dataclasses/TEDROOMByte/models/TEDROOMByte.ed_dclass";
import "../../../protocols/CPRecData/models/CPRecData.ed_prot";
import "../../../protocols/EDROOMTimingSAP/models/EDROOMTimingSAP.ed_prot";
import "../../../protocols/EDROOMServiceLibrary/models/EDROOMServiceLibrary.ed_prot";



/**
 * \class   CCConsumer
 *
 */


reactive component CCConsumer{

	uri := es.uah.aut.srg.edroom.mclev.cmp.CCConsumer;
	version := v1;
	stack_size := 1024;
	def_max_nb_messages := 10;


	structure {

		ports {


			system port EDROOMsl
			{
				id:= 0;
				protocol:= EDROOMServiceLibrary(v1);
			};
			timing port Timer {
				id := 1;
				protocol := EDROOMTimingSAP(v1);

			};

			external port pIn {
				id := 2;
				cardinality := 1;
				protocol := CPRecData(v1);

			};



		};


	};


	behaviour {

		contexts {


			context Top_0{


				id := 0;


				states {
					state I{
						id := 0;
					};
					state Ready{
						id := 1;

						entry sends := FConReady;
					};
					state SubEstado2{
						id := 2;
					};
				};


				init state := I;


				items{
					/**
					 * \brief  
					 */

					send FConReady {
						code {
							<code>


							</code>
						};

						port :=pIn;

						message :=CPRecData(v1)::SConReady;

						priority :=3;

					};

					/**
					 * \brief  
					 */

					inform in FFProgDelay {
						code {
							<code>
								 
								//Timing Service useful methods
								 
								interval = Pr_Time(1,0); // interval of X sec + Y microsec


							</code>
						};

						port :=Timer;

						priority :=3;

					};

					/**
					 * \brief  
					 */

					msgdatahandler FShowData {
						code {
							<code>
								
									// Data access
								
								// ... =varSData;
								printf(&quot;Data=%c\n&quot;,varSData);


							</code>
						};

						port :=pIn;

						message :=CPRecData(v1)::SData;

					};

					/**
					 * \brief  
					 */

					action FShowTime {
						<code>
						Pr_Time aux;
						aux.GetTime();
						printf(&quot;Current Time=%i \n&quot;,(uint32_t)aux.Secns());


						</code>

					};


				};


				transitions{

					transition Init{
						id := 0;
						source := I;
						sink := Ready;



						asynchronous trigger {
							port := EDROOMsl;
							message := EDROOMServiceLibrary(v1)::EDROOMStart;
						};
					};

					transition ShowData{
						id := 1;
						source := Ready;
						sink := SubEstado2;


						msgdatahandler := FShowData;


						asynchronous trigger {
							port := pIn;
							message := CPRecData(v1)::SData;
						};
					};

					transition EndHandling{
						id := 2;
						source := SubEstado2;
						sink := Ready;


						actions := FShowTime;


						asynchronous trigger {
							port := Timer;
							message := EDROOMTimingSAP(v1)::EDROOMSignalTimeout;
						};
					};


				};


			};


		};

		top context := Top_0;


	};


};